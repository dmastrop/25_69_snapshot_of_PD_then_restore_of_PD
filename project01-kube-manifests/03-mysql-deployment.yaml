apiVersion: apps/v1
# https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#deployment-v1-apps
kind: Deployment
metadata:
  name: mysql
spec: 
#https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#deploymentspec-v1-apps
# relational database has standards of replication. Not good to use replicas here.  SQL master-master and master-slave is 
# taken care of by mysql standard
  replicas: 1
  selector:
    matchLabels:
      app: mysql
      # this app: label must match that in the mysql service yaml.
  strategy:
    type: Recreate # terminates all the pods and replaces them with the new version.
  template: 
    metadata: 
      labels: 
        app: mysql
    spec: 
      containers:
        - name: mysql
          image: mysql:8.0
          #dockerhub image
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: dbpassword11
              # this password will be used in the usermgmtwebapp yaml as one of the ENV variables
              # The usermgmtwebapp will then be able to establish a connection to the mysql db.
          ports:
            - containerPort: 3306
              name: mysql    
          volumeMounts:
          # this mounts the volume: below to the pod
            - name: mysql-persistent-storage
            # name is volume array name below
              mountPath: /var/lib/mysql 
              # volume mount point in the mysql container   
            - name: usermanagement-dbcreation-script
              mountPath: /docker-entrypoint-initdb.d #https://hub.docker.com/_/mysql Refer Initializing a fresh instance  
              # see the notes below  
              # the script specified in the ConfigMap yaml will be mounted at this /docker-entrypoint-initdb.d folder
              # see the notes below on this special folder. This folder is for bootup script execution for first time bootup of container
              # it will initialize the database properly.
                                        
      volumes: 
      #these are pod level volumes
      # this link has example https://kubernetes.io/docs/concepts/storage/volumes/
        - name: mysql-persistent-storage
        # persistent volume name
          persistentVolumeClaim:
            claimName: mysql-pv-claim
            # persitent volume claim name (not the PV name)
            # this is the name used in the persitent-volume-claim.yaml file
        - name: usermanagement-dbcreation-script
        # this is the name in the ConfigMap.yaml
          configMap:
            name: usermanagement-dbcreation-script


# VERY IMPORTANT POINTS ABOUT CONTAINERS AND POD VOLUMES: 
## 1. On-disk files in a container are ephemeral
## 2. One problem is the loss of files when a container crashes. 
## 3. Kubernetes Volumes solves above two as these volumes are configured to POD and not container. 
## Only they can be mounted in Container
## 4. Using Compute Enginer Persistent Disk CSI Driver is a super generalized approach 
## for having Persistent Volumes for workloads in Kubernetes
# furthermore the PV exists outside of the default namespace and is not bound to any particular pod
# as such it is persistent through container crashes, etc.  The pod is bound to the persistent volume via the persistent volume claim
# in this respect, claim to a portion of the volume is dynamic.


## ENVIRONMENT VARIABLES
# 1. When you create a Pod, you can set environment variables for the 
# containers that run in the Pod. 
# 2. To set environment variables, include the env or envFrom field in 
# the configuration file.


## DEPLOYMENT STRATEGIES
# 1. Rolling deployment: This strategy  replaces pods running the old version of the application with the new version, one by one, without downtime to the cluster.
# 2. Recreate: This strategy terminates all the pods and replaces them with the new version.
# 3. Ramped slow rollout: This strategy  rolls out replicas of the new version, while in parallel, shutting down old replicas. 
# 4. Best-effort controlled rollout: This strategy  specifies a “max unavailable” parameter which indicates what percentage of existing pods can be unavailable during the upgrade, enabling the rollout to happen much more quickly.
# 5. Canary Deployment: This strategy  uses a progressive delivery approach, with one version of the application serving maximum users, and another, newer version serving a small set of test users. The test deployment is rolled out to more users if it is successful.

#https://hub.docker.com/_/mysql
# Initializing a fresh instance
# When a container is started for the first time, a new database with the specified name will be created and initialized with the provided configuration variables. Furthermore, it will execute files with extensions .sh, .sql and .sql.gz that are found in 
# /docker-entrypoint-initdb.d. Files will be executed in alphabetical order. You can easily populate your mysql services by mounting a SQL dump into that directory and provide custom images with contributed data. 
# SQL files will be imported by default to the database specified by the MYSQL_DATABASE variable.