apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec: 
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate 
  template: 
    metadata: 
      labels: 
        app: mysql
    spec: 
      containers:
        - name: mysql
          image: mysql:8.0
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: dbpassword11
          ports:
            - containerPort: 3306
              name: mysql    
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql    
            - name: usermanagement-dbcreation-script
              mountPath: /docker-entrypoint-initdb.d #https://hub.docker.com/_/mysql Refer Initializing a fresh instance                                            
      volumes: 
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            #claimName: mysql-pv-claim
            claimName: pvc-restore
            # this is the only change required to restore the mysql from the shapshot that we took
        - name: usermanagement-dbcreation-script
          configMap:
            name: usermanagement-dbcreation-script

# important overal note:
# The new restore PVC will refer to the snapshot yaml by name.  
# The claimName in the volume definition in the new deployment yaml wil refer to this new pvc-restore yaml by name (see above). 
# Thus the new deployment is linked to the new PVC and the new PVC is linked to the snapshot yaml.  
# in this way the new deployment of the mysql will be with this snapshot volume and we should see the original users in the database.  
# the new mysql deployment must refer to this new restore PVC, and once deployed, automatically the frontend will connect to the mysql clusterIP
# the new underlying drive will be the new snapshot volume.
# the original volume will have one user, but snapshot will have 3 users.        

